@page "/ingredients"
@using Backend.Repositories
@using Backend.Models
@using Backend.Context
@inject IRepository<Ingredient> IngredientRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h1>Ingredients</h1>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Description</th>
            <th>Allergen</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ingredient in ingredients)
        {
            <tr>
                <td>@ingredient.IngredientId</td>
                <td>@ingredient.IngredientName</td>
                <td>@ingredient.IngredientDescription</td>
                <td>@(ingredient.IsAllergen ? "Yes" : "No")</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditIngredient(ingredient.IngredientId)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteIngredient(ingredient.IngredientId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div>
    <button class="btn btn-success" @onclick="CreateIngredient">Create Ingredient</button>
</div>

@code {
    private List<Ingredient> ingredients = new List<Ingredient>();


    protected override async Task OnInitializedAsync()
    {
        ingredients = await IngredientRepository.GetAllAsync();
    }

    private void EditIngredient(int id)
    {
        NavigationManager.NavigateTo($"/ingredients/edit/{id}");
    }

    private async Task DeleteIngredient(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            await IngredientRepository.DeleteAsync(id);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }

    private void CreateIngredient()
    {
        NavigationManager.NavigateTo("/ingredients/create");
    }

}