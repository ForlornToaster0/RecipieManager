@page "/user/{id}"
@using Backend.Repositories;
@using Backend.Models;
@using Backend.Context;
@inject IUserIngredientsRepository IngredientRepository
@inject IRepository<User> UserRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h1>User Details</h1>

@if (User == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h4>@User.UserName</h4>
        </div>
        <div class="card-body">
            <h5 class="card-title">User Email: @User.UserEmail</h5>
            <p class="card-text">User Permission Level: @User.UserPermisionlevel</p>
            <h5 class="card-title">Ingredients:</h5>
            @if (UserIngredient.Any())
            {
                <ul>
                    @foreach (var ingredient in UserIngredient)
                    {
                        <li>@ingredient.Ingredient.IngredientName</li>
                    }
                </ul>
            }
            else
            {
                <p>No ingredients found for this user.</p>
            }
            <button class="btn btn-primary" @onclick="UpdateUser">Update User</button>
            <button class="btn btn-danger" @onclick="DeleteUser">Delete User</button>
            <a href="/users" class="btn btn-primary">Back to User List</a>
        </div>
    </div>
}

@code {
    private User User;
    private List<UserIngredient> UserIngredient;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await UserRepository.GetByIdAsync(Convert.ToInt32(id));
        UserIngredient = await IngredientRepository.GetByIdInnerJoin(Convert.ToInt32(id));
    }

    public async Task UpdateUser()
    {
        NavigationManager.NavigateTo($"/user/update/{id}");
    }

    public async Task DeleteUser()
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            await UserRepository.DeleteAsync(new User { UserId = Convert.ToInt32(id) });
            NavigationManager.NavigateTo("/user");
        }
    }
}